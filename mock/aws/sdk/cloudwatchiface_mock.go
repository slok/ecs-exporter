// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/aws/aws-sdk-go/service/cloudwatch/cloudwatchiface/interface.go

// Package sdk is a generated GoMock package.
package sdk

import (
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudwatch "github.com/aws/aws-sdk-go/service/cloudwatch"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudWatchAPI is a mock of CloudWatchAPI interface
type MockCloudWatchAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCloudWatchAPIMockRecorder
}

// MockCloudWatchAPIMockRecorder is the mock recorder for MockCloudWatchAPI
type MockCloudWatchAPIMockRecorder struct {
	mock *MockCloudWatchAPI
}

// NewMockCloudWatchAPI creates a new mock instance
func NewMockCloudWatchAPI(ctrl *gomock.Controller) *MockCloudWatchAPI {
	mock := &MockCloudWatchAPI{ctrl: ctrl}
	mock.recorder = &MockCloudWatchAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCloudWatchAPI) EXPECT() *MockCloudWatchAPIMockRecorder {
	return m.recorder
}

// DeleteAlarms mocks base method
func (m *MockCloudWatchAPI) DeleteAlarms(arg0 *cloudwatch.DeleteAlarmsInput) (*cloudwatch.DeleteAlarmsOutput, error) {
	ret := m.ctrl.Call(m, "DeleteAlarms", arg0)
	ret0, _ := ret[0].(*cloudwatch.DeleteAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlarms indicates an expected call of DeleteAlarms
func (mr *MockCloudWatchAPIMockRecorder) DeleteAlarms(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarms", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteAlarms), arg0)
}

// DeleteAlarmsWithContext mocks base method
func (m *MockCloudWatchAPI) DeleteAlarmsWithContext(arg0 aws.Context, arg1 *cloudwatch.DeleteAlarmsInput, arg2 ...request.Option) (*cloudwatch.DeleteAlarmsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAlarmsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DeleteAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlarmsWithContext indicates an expected call of DeleteAlarmsWithContext
func (mr *MockCloudWatchAPIMockRecorder) DeleteAlarmsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteAlarmsWithContext), varargs...)
}

// DeleteAlarmsRequest mocks base method
func (m *MockCloudWatchAPI) DeleteAlarmsRequest(arg0 *cloudwatch.DeleteAlarmsInput) (*request.Request, *cloudwatch.DeleteAlarmsOutput) {
	ret := m.ctrl.Call(m, "DeleteAlarmsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DeleteAlarmsOutput)
	return ret0, ret1
}

// DeleteAlarmsRequest indicates an expected call of DeleteAlarmsRequest
func (mr *MockCloudWatchAPIMockRecorder) DeleteAlarmsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlarmsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteAlarmsRequest), arg0)
}

// DeleteDashboards mocks base method
func (m *MockCloudWatchAPI) DeleteDashboards(arg0 *cloudwatch.DeleteDashboardsInput) (*cloudwatch.DeleteDashboardsOutput, error) {
	ret := m.ctrl.Call(m, "DeleteDashboards", arg0)
	ret0, _ := ret[0].(*cloudwatch.DeleteDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboards indicates an expected call of DeleteDashboards
func (mr *MockCloudWatchAPIMockRecorder) DeleteDashboards(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboards", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteDashboards), arg0)
}

// DeleteDashboardsWithContext mocks base method
func (m *MockCloudWatchAPI) DeleteDashboardsWithContext(arg0 aws.Context, arg1 *cloudwatch.DeleteDashboardsInput, arg2 ...request.Option) (*cloudwatch.DeleteDashboardsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDashboardsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DeleteDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDashboardsWithContext indicates an expected call of DeleteDashboardsWithContext
func (mr *MockCloudWatchAPIMockRecorder) DeleteDashboardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboardsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteDashboardsWithContext), varargs...)
}

// DeleteDashboardsRequest mocks base method
func (m *MockCloudWatchAPI) DeleteDashboardsRequest(arg0 *cloudwatch.DeleteDashboardsInput) (*request.Request, *cloudwatch.DeleteDashboardsOutput) {
	ret := m.ctrl.Call(m, "DeleteDashboardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DeleteDashboardsOutput)
	return ret0, ret1
}

// DeleteDashboardsRequest indicates an expected call of DeleteDashboardsRequest
func (mr *MockCloudWatchAPIMockRecorder) DeleteDashboardsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDashboardsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DeleteDashboardsRequest), arg0)
}

// DescribeAlarmHistory mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmHistory(arg0 *cloudwatch.DescribeAlarmHistoryInput) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	ret := m.ctrl.Call(m, "DescribeAlarmHistory", arg0)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmHistory indicates an expected call of DescribeAlarmHistory
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmHistory(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistory", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmHistory), arg0)
}

// DescribeAlarmHistoryWithContext mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmHistoryWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmHistoryInput, arg2 ...request.Option) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmHistoryWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmHistoryWithContext indicates an expected call of DescribeAlarmHistoryWithContext
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistoryWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmHistoryWithContext), varargs...)
}

// DescribeAlarmHistoryRequest mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmHistoryRequest(arg0 *cloudwatch.DescribeAlarmHistoryInput) (*request.Request, *cloudwatch.DescribeAlarmHistoryOutput) {
	ret := m.ctrl.Call(m, "DescribeAlarmHistoryRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DescribeAlarmHistoryOutput)
	return ret0, ret1
}

// DescribeAlarmHistoryRequest indicates an expected call of DescribeAlarmHistoryRequest
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmHistoryRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistoryRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmHistoryRequest), arg0)
}

// DescribeAlarmHistoryPages mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmHistoryPages(arg0 *cloudwatch.DescribeAlarmHistoryInput, arg1 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "DescribeAlarmHistoryPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAlarmHistoryPages indicates an expected call of DescribeAlarmHistoryPages
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistoryPages", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmHistoryPages), arg0, arg1)
}

// DescribeAlarmHistoryPagesWithContext mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmHistoryPagesWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmHistoryInput, arg2 func(*cloudwatch.DescribeAlarmHistoryOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmHistoryPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAlarmHistoryPagesWithContext indicates an expected call of DescribeAlarmHistoryPagesWithContext
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmHistoryPagesWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmHistoryPagesWithContext), varargs...)
}

// DescribeAlarms mocks base method
func (m *MockCloudWatchAPI) DescribeAlarms(arg0 *cloudwatch.DescribeAlarmsInput) (*cloudwatch.DescribeAlarmsOutput, error) {
	ret := m.ctrl.Call(m, "DescribeAlarms", arg0)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarms indicates an expected call of DescribeAlarms
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarms(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarms", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarms), arg0)
}

// DescribeAlarmsWithContext mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmsInput, arg2 ...request.Option) (*cloudwatch.DescribeAlarmsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmsWithContext indicates an expected call of DescribeAlarmsWithContext
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsWithContext), varargs...)
}

// DescribeAlarmsRequest mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsRequest(arg0 *cloudwatch.DescribeAlarmsInput) (*request.Request, *cloudwatch.DescribeAlarmsOutput) {
	ret := m.ctrl.Call(m, "DescribeAlarmsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DescribeAlarmsOutput)
	return ret0, ret1
}

// DescribeAlarmsRequest indicates an expected call of DescribeAlarmsRequest
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsRequest), arg0)
}

// DescribeAlarmsPages mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsPages(arg0 *cloudwatch.DescribeAlarmsInput, arg1 func(*cloudwatch.DescribeAlarmsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "DescribeAlarmsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAlarmsPages indicates an expected call of DescribeAlarmsPages
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsPages", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsPages), arg0, arg1)
}

// DescribeAlarmsPagesWithContext mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsPagesWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmsInput, arg2 func(*cloudwatch.DescribeAlarmsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DescribeAlarmsPagesWithContext indicates an expected call of DescribeAlarmsPagesWithContext
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsPagesWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsPagesWithContext), varargs...)
}

// DescribeAlarmsForMetric mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsForMetric(arg0 *cloudwatch.DescribeAlarmsForMetricInput) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	ret := m.ctrl.Call(m, "DescribeAlarmsForMetric", arg0)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsForMetricOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmsForMetric indicates an expected call of DescribeAlarmsForMetric
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsForMetric(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsForMetric", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsForMetric), arg0)
}

// DescribeAlarmsForMetricWithContext mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsForMetricWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmsForMetricInput, arg2 ...request.Option) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeAlarmsForMetricWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DescribeAlarmsForMetricOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAlarmsForMetricWithContext indicates an expected call of DescribeAlarmsForMetricWithContext
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsForMetricWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsForMetricWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsForMetricWithContext), varargs...)
}

// DescribeAlarmsForMetricRequest mocks base method
func (m *MockCloudWatchAPI) DescribeAlarmsForMetricRequest(arg0 *cloudwatch.DescribeAlarmsForMetricInput) (*request.Request, *cloudwatch.DescribeAlarmsForMetricOutput) {
	ret := m.ctrl.Call(m, "DescribeAlarmsForMetricRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DescribeAlarmsForMetricOutput)
	return ret0, ret1
}

// DescribeAlarmsForMetricRequest indicates an expected call of DescribeAlarmsForMetricRequest
func (mr *MockCloudWatchAPIMockRecorder) DescribeAlarmsForMetricRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAlarmsForMetricRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DescribeAlarmsForMetricRequest), arg0)
}

// DisableAlarmActions mocks base method
func (m *MockCloudWatchAPI) DisableAlarmActions(arg0 *cloudwatch.DisableAlarmActionsInput) (*cloudwatch.DisableAlarmActionsOutput, error) {
	ret := m.ctrl.Call(m, "DisableAlarmActions", arg0)
	ret0, _ := ret[0].(*cloudwatch.DisableAlarmActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAlarmActions indicates an expected call of DisableAlarmActions
func (mr *MockCloudWatchAPIMockRecorder) DisableAlarmActions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAlarmActions", reflect.TypeOf((*MockCloudWatchAPI)(nil).DisableAlarmActions), arg0)
}

// DisableAlarmActionsWithContext mocks base method
func (m *MockCloudWatchAPI) DisableAlarmActionsWithContext(arg0 aws.Context, arg1 *cloudwatch.DisableAlarmActionsInput, arg2 ...request.Option) (*cloudwatch.DisableAlarmActionsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableAlarmActionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.DisableAlarmActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAlarmActionsWithContext indicates an expected call of DisableAlarmActionsWithContext
func (mr *MockCloudWatchAPIMockRecorder) DisableAlarmActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAlarmActionsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).DisableAlarmActionsWithContext), varargs...)
}

// DisableAlarmActionsRequest mocks base method
func (m *MockCloudWatchAPI) DisableAlarmActionsRequest(arg0 *cloudwatch.DisableAlarmActionsInput) (*request.Request, *cloudwatch.DisableAlarmActionsOutput) {
	ret := m.ctrl.Call(m, "DisableAlarmActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.DisableAlarmActionsOutput)
	return ret0, ret1
}

// DisableAlarmActionsRequest indicates an expected call of DisableAlarmActionsRequest
func (mr *MockCloudWatchAPIMockRecorder) DisableAlarmActionsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAlarmActionsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).DisableAlarmActionsRequest), arg0)
}

// EnableAlarmActions mocks base method
func (m *MockCloudWatchAPI) EnableAlarmActions(arg0 *cloudwatch.EnableAlarmActionsInput) (*cloudwatch.EnableAlarmActionsOutput, error) {
	ret := m.ctrl.Call(m, "EnableAlarmActions", arg0)
	ret0, _ := ret[0].(*cloudwatch.EnableAlarmActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAlarmActions indicates an expected call of EnableAlarmActions
func (mr *MockCloudWatchAPIMockRecorder) EnableAlarmActions(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlarmActions", reflect.TypeOf((*MockCloudWatchAPI)(nil).EnableAlarmActions), arg0)
}

// EnableAlarmActionsWithContext mocks base method
func (m *MockCloudWatchAPI) EnableAlarmActionsWithContext(arg0 aws.Context, arg1 *cloudwatch.EnableAlarmActionsInput, arg2 ...request.Option) (*cloudwatch.EnableAlarmActionsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableAlarmActionsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.EnableAlarmActionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAlarmActionsWithContext indicates an expected call of EnableAlarmActionsWithContext
func (mr *MockCloudWatchAPIMockRecorder) EnableAlarmActionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlarmActionsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).EnableAlarmActionsWithContext), varargs...)
}

// EnableAlarmActionsRequest mocks base method
func (m *MockCloudWatchAPI) EnableAlarmActionsRequest(arg0 *cloudwatch.EnableAlarmActionsInput) (*request.Request, *cloudwatch.EnableAlarmActionsOutput) {
	ret := m.ctrl.Call(m, "EnableAlarmActionsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.EnableAlarmActionsOutput)
	return ret0, ret1
}

// EnableAlarmActionsRequest indicates an expected call of EnableAlarmActionsRequest
func (mr *MockCloudWatchAPIMockRecorder) EnableAlarmActionsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAlarmActionsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).EnableAlarmActionsRequest), arg0)
}

// GetDashboard mocks base method
func (m *MockCloudWatchAPI) GetDashboard(arg0 *cloudwatch.GetDashboardInput) (*cloudwatch.GetDashboardOutput, error) {
	ret := m.ctrl.Call(m, "GetDashboard", arg0)
	ret0, _ := ret[0].(*cloudwatch.GetDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard
func (mr *MockCloudWatchAPIMockRecorder) GetDashboard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetDashboard), arg0)
}

// GetDashboardWithContext mocks base method
func (m *MockCloudWatchAPI) GetDashboardWithContext(arg0 aws.Context, arg1 *cloudwatch.GetDashboardInput, arg2 ...request.Option) (*cloudwatch.GetDashboardOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardWithContext indicates an expected call of GetDashboardWithContext
func (mr *MockCloudWatchAPIMockRecorder) GetDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetDashboardWithContext), varargs...)
}

// GetDashboardRequest mocks base method
func (m *MockCloudWatchAPI) GetDashboardRequest(arg0 *cloudwatch.GetDashboardInput) (*request.Request, *cloudwatch.GetDashboardOutput) {
	ret := m.ctrl.Call(m, "GetDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.GetDashboardOutput)
	return ret0, ret1
}

// GetDashboardRequest indicates an expected call of GetDashboardRequest
func (mr *MockCloudWatchAPIMockRecorder) GetDashboardRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetDashboardRequest), arg0)
}

// GetMetricStatistics mocks base method
func (m *MockCloudWatchAPI) GetMetricStatistics(arg0 *cloudwatch.GetMetricStatisticsInput) (*cloudwatch.GetMetricStatisticsOutput, error) {

	ret := m.ctrl.Call(m, "GetMetricStatistics", arg0)

	ret0, _ := ret[0].(*cloudwatch.GetMetricStatisticsOutput)
	ret1, _ := ret[1].(error)

	return ret0, ret1
}

// GetMetricStatistics indicates an expected call of GetMetricStatistics
func (mr *MockCloudWatchAPIMockRecorder) GetMetricStatistics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStatistics", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetMetricStatistics), arg0)
}

// GetMetricStatisticsWithContext mocks base method
func (m *MockCloudWatchAPI) GetMetricStatisticsWithContext(arg0 aws.Context, arg1 *cloudwatch.GetMetricStatisticsInput, arg2 ...request.Option) (*cloudwatch.GetMetricStatisticsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricStatisticsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.GetMetricStatisticsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricStatisticsWithContext indicates an expected call of GetMetricStatisticsWithContext
func (mr *MockCloudWatchAPIMockRecorder) GetMetricStatisticsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStatisticsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetMetricStatisticsWithContext), varargs...)
}

// GetMetricStatisticsRequest mocks base method
func (m *MockCloudWatchAPI) GetMetricStatisticsRequest(arg0 *cloudwatch.GetMetricStatisticsInput) (*request.Request, *cloudwatch.GetMetricStatisticsOutput) {
	ret := m.ctrl.Call(m, "GetMetricStatisticsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.GetMetricStatisticsOutput)
	return ret0, ret1
}

// GetMetricStatisticsRequest indicates an expected call of GetMetricStatisticsRequest
func (mr *MockCloudWatchAPIMockRecorder) GetMetricStatisticsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricStatisticsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).GetMetricStatisticsRequest), arg0)
}

// ListDashboards mocks base method
func (m *MockCloudWatchAPI) ListDashboards(arg0 *cloudwatch.ListDashboardsInput) (*cloudwatch.ListDashboardsOutput, error) {
	ret := m.ctrl.Call(m, "ListDashboards", arg0)
	ret0, _ := ret[0].(*cloudwatch.ListDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboards indicates an expected call of ListDashboards
func (mr *MockCloudWatchAPIMockRecorder) ListDashboards(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboards", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListDashboards), arg0)
}

// ListDashboardsWithContext mocks base method
func (m *MockCloudWatchAPI) ListDashboardsWithContext(arg0 aws.Context, arg1 *cloudwatch.ListDashboardsInput, arg2 ...request.Option) (*cloudwatch.ListDashboardsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDashboardsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListDashboardsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDashboardsWithContext indicates an expected call of ListDashboardsWithContext
func (mr *MockCloudWatchAPIMockRecorder) ListDashboardsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListDashboardsWithContext), varargs...)
}

// ListDashboardsRequest mocks base method
func (m *MockCloudWatchAPI) ListDashboardsRequest(arg0 *cloudwatch.ListDashboardsInput) (*request.Request, *cloudwatch.ListDashboardsOutput) {
	ret := m.ctrl.Call(m, "ListDashboardsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.ListDashboardsOutput)
	return ret0, ret1
}

// ListDashboardsRequest indicates an expected call of ListDashboardsRequest
func (mr *MockCloudWatchAPIMockRecorder) ListDashboardsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDashboardsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListDashboardsRequest), arg0)
}

// ListMetrics mocks base method
func (m *MockCloudWatchAPI) ListMetrics(arg0 *cloudwatch.ListMetricsInput) (*cloudwatch.ListMetricsOutput, error) {
	ret := m.ctrl.Call(m, "ListMetrics", arg0)
	ret0, _ := ret[0].(*cloudwatch.ListMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetrics indicates an expected call of ListMetrics
func (mr *MockCloudWatchAPIMockRecorder) ListMetrics(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrics", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListMetrics), arg0)
}

// ListMetricsWithContext mocks base method
func (m *MockCloudWatchAPI) ListMetricsWithContext(arg0 aws.Context, arg1 *cloudwatch.ListMetricsInput, arg2 ...request.Option) (*cloudwatch.ListMetricsOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricsWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.ListMetricsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMetricsWithContext indicates an expected call of ListMetricsWithContext
func (mr *MockCloudWatchAPIMockRecorder) ListMetricsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListMetricsWithContext), varargs...)
}

// ListMetricsRequest mocks base method
func (m *MockCloudWatchAPI) ListMetricsRequest(arg0 *cloudwatch.ListMetricsInput) (*request.Request, *cloudwatch.ListMetricsOutput) {
	ret := m.ctrl.Call(m, "ListMetricsRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.ListMetricsOutput)
	return ret0, ret1
}

// ListMetricsRequest indicates an expected call of ListMetricsRequest
func (mr *MockCloudWatchAPIMockRecorder) ListMetricsRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricsRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListMetricsRequest), arg0)
}

// ListMetricsPages mocks base method
func (m *MockCloudWatchAPI) ListMetricsPages(arg0 *cloudwatch.ListMetricsInput, arg1 func(*cloudwatch.ListMetricsOutput, bool) bool) error {
	ret := m.ctrl.Call(m, "ListMetricsPages", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetricsPages indicates an expected call of ListMetricsPages
func (mr *MockCloudWatchAPIMockRecorder) ListMetricsPages(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricsPages", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListMetricsPages), arg0, arg1)
}

// ListMetricsPagesWithContext mocks base method
func (m *MockCloudWatchAPI) ListMetricsPagesWithContext(arg0 aws.Context, arg1 *cloudwatch.ListMetricsInput, arg2 func(*cloudwatch.ListMetricsOutput, bool) bool, arg3 ...request.Option) error {
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMetricsPagesWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListMetricsPagesWithContext indicates an expected call of ListMetricsPagesWithContext
func (mr *MockCloudWatchAPIMockRecorder) ListMetricsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricsPagesWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).ListMetricsPagesWithContext), varargs...)
}

// PutDashboard mocks base method
func (m *MockCloudWatchAPI) PutDashboard(arg0 *cloudwatch.PutDashboardInput) (*cloudwatch.PutDashboardOutput, error) {
	ret := m.ctrl.Call(m, "PutDashboard", arg0)
	ret0, _ := ret[0].(*cloudwatch.PutDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDashboard indicates an expected call of PutDashboard
func (mr *MockCloudWatchAPIMockRecorder) PutDashboard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDashboard", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutDashboard), arg0)
}

// PutDashboardWithContext mocks base method
func (m *MockCloudWatchAPI) PutDashboardWithContext(arg0 aws.Context, arg1 *cloudwatch.PutDashboardInput, arg2 ...request.Option) (*cloudwatch.PutDashboardOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDashboardWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.PutDashboardOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDashboardWithContext indicates an expected call of PutDashboardWithContext
func (mr *MockCloudWatchAPIMockRecorder) PutDashboardWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDashboardWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutDashboardWithContext), varargs...)
}

// PutDashboardRequest mocks base method
func (m *MockCloudWatchAPI) PutDashboardRequest(arg0 *cloudwatch.PutDashboardInput) (*request.Request, *cloudwatch.PutDashboardOutput) {
	ret := m.ctrl.Call(m, "PutDashboardRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.PutDashboardOutput)
	return ret0, ret1
}

// PutDashboardRequest indicates an expected call of PutDashboardRequest
func (mr *MockCloudWatchAPIMockRecorder) PutDashboardRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDashboardRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutDashboardRequest), arg0)
}

// PutMetricAlarm mocks base method
func (m *MockCloudWatchAPI) PutMetricAlarm(arg0 *cloudwatch.PutMetricAlarmInput) (*cloudwatch.PutMetricAlarmOutput, error) {
	ret := m.ctrl.Call(m, "PutMetricAlarm", arg0)
	ret0, _ := ret[0].(*cloudwatch.PutMetricAlarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetricAlarm indicates an expected call of PutMetricAlarm
func (mr *MockCloudWatchAPIMockRecorder) PutMetricAlarm(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricAlarm", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricAlarm), arg0)
}

// PutMetricAlarmWithContext mocks base method
func (m *MockCloudWatchAPI) PutMetricAlarmWithContext(arg0 aws.Context, arg1 *cloudwatch.PutMetricAlarmInput, arg2 ...request.Option) (*cloudwatch.PutMetricAlarmOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMetricAlarmWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.PutMetricAlarmOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetricAlarmWithContext indicates an expected call of PutMetricAlarmWithContext
func (mr *MockCloudWatchAPIMockRecorder) PutMetricAlarmWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricAlarmWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricAlarmWithContext), varargs...)
}

// PutMetricAlarmRequest mocks base method
func (m *MockCloudWatchAPI) PutMetricAlarmRequest(arg0 *cloudwatch.PutMetricAlarmInput) (*request.Request, *cloudwatch.PutMetricAlarmOutput) {
	ret := m.ctrl.Call(m, "PutMetricAlarmRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.PutMetricAlarmOutput)
	return ret0, ret1
}

// PutMetricAlarmRequest indicates an expected call of PutMetricAlarmRequest
func (mr *MockCloudWatchAPIMockRecorder) PutMetricAlarmRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricAlarmRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricAlarmRequest), arg0)
}

// PutMetricData mocks base method
func (m *MockCloudWatchAPI) PutMetricData(arg0 *cloudwatch.PutMetricDataInput) (*cloudwatch.PutMetricDataOutput, error) {
	ret := m.ctrl.Call(m, "PutMetricData", arg0)
	ret0, _ := ret[0].(*cloudwatch.PutMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetricData indicates an expected call of PutMetricData
func (mr *MockCloudWatchAPIMockRecorder) PutMetricData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricData", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricData), arg0)
}

// PutMetricDataWithContext mocks base method
func (m *MockCloudWatchAPI) PutMetricDataWithContext(arg0 aws.Context, arg1 *cloudwatch.PutMetricDataInput, arg2 ...request.Option) (*cloudwatch.PutMetricDataOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutMetricDataWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.PutMetricDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMetricDataWithContext indicates an expected call of PutMetricDataWithContext
func (mr *MockCloudWatchAPIMockRecorder) PutMetricDataWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricDataWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricDataWithContext), varargs...)
}

// PutMetricDataRequest mocks base method
func (m *MockCloudWatchAPI) PutMetricDataRequest(arg0 *cloudwatch.PutMetricDataInput) (*request.Request, *cloudwatch.PutMetricDataOutput) {
	ret := m.ctrl.Call(m, "PutMetricDataRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.PutMetricDataOutput)
	return ret0, ret1
}

// PutMetricDataRequest indicates an expected call of PutMetricDataRequest
func (mr *MockCloudWatchAPIMockRecorder) PutMetricDataRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetricDataRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).PutMetricDataRequest), arg0)
}

// SetAlarmState mocks base method
func (m *MockCloudWatchAPI) SetAlarmState(arg0 *cloudwatch.SetAlarmStateInput) (*cloudwatch.SetAlarmStateOutput, error) {
	ret := m.ctrl.Call(m, "SetAlarmState", arg0)
	ret0, _ := ret[0].(*cloudwatch.SetAlarmStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAlarmState indicates an expected call of SetAlarmState
func (mr *MockCloudWatchAPIMockRecorder) SetAlarmState(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlarmState", reflect.TypeOf((*MockCloudWatchAPI)(nil).SetAlarmState), arg0)
}

// SetAlarmStateWithContext mocks base method
func (m *MockCloudWatchAPI) SetAlarmStateWithContext(arg0 aws.Context, arg1 *cloudwatch.SetAlarmStateInput, arg2 ...request.Option) (*cloudwatch.SetAlarmStateOutput, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAlarmStateWithContext", varargs...)
	ret0, _ := ret[0].(*cloudwatch.SetAlarmStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAlarmStateWithContext indicates an expected call of SetAlarmStateWithContext
func (mr *MockCloudWatchAPIMockRecorder) SetAlarmStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlarmStateWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).SetAlarmStateWithContext), varargs...)
}

// SetAlarmStateRequest mocks base method
func (m *MockCloudWatchAPI) SetAlarmStateRequest(arg0 *cloudwatch.SetAlarmStateInput) (*request.Request, *cloudwatch.SetAlarmStateOutput) {
	ret := m.ctrl.Call(m, "SetAlarmStateRequest", arg0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatch.SetAlarmStateOutput)
	return ret0, ret1
}

// SetAlarmStateRequest indicates an expected call of SetAlarmStateRequest
func (mr *MockCloudWatchAPIMockRecorder) SetAlarmStateRequest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlarmStateRequest", reflect.TypeOf((*MockCloudWatchAPI)(nil).SetAlarmStateRequest), arg0)
}

// WaitUntilAlarmExists mocks base method
func (m *MockCloudWatchAPI) WaitUntilAlarmExists(arg0 *cloudwatch.DescribeAlarmsInput) error {
	ret := m.ctrl.Call(m, "WaitUntilAlarmExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAlarmExists indicates an expected call of WaitUntilAlarmExists
func (mr *MockCloudWatchAPIMockRecorder) WaitUntilAlarmExists(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAlarmExists", reflect.TypeOf((*MockCloudWatchAPI)(nil).WaitUntilAlarmExists), arg0)
}

// WaitUntilAlarmExistsWithContext mocks base method
func (m *MockCloudWatchAPI) WaitUntilAlarmExistsWithContext(arg0 aws.Context, arg1 *cloudwatch.DescribeAlarmsInput, arg2 ...request.WaiterOption) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitUntilAlarmExistsWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitUntilAlarmExistsWithContext indicates an expected call of WaitUntilAlarmExistsWithContext
func (mr *MockCloudWatchAPIMockRecorder) WaitUntilAlarmExistsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitUntilAlarmExistsWithContext", reflect.TypeOf((*MockCloudWatchAPI)(nil).WaitUntilAlarmExistsWithContext), varargs...)
}
